class Solution {
public:
    void fillsieve(vector<bool>& sieve) {
        int n = sieve.size() - 1;
        for (int i = 2; i * i <= n; i++) {
            if (sieve[i]) {
                for (int j = i * i; j <= n; j += i) {
                    sieve[j] = 0;
                }
            }
        }
    }

    int distinctPrimeFactors(vector<int>& nums) {
        int n = nums.size();
        int mx = -1;

        // Find the maximum number in nums
        for (int i = 0; i < n; i++) {
            mx = max(mx, nums[i]);
        }

        // Initialize sieve
        vector<bool> sieve(mx+1, 1);
        sieve[0] = sieve[1] = 0;
        fillsieve(sieve);

        // Collect all primes from the sieve
        vector<int> primes;
        for (int i = 2; i <= mx; i++) {
            if (sieve[i]) primes.push_back(i);
        }

        // Track which primes are factors of any number in nums
        vector<bool> taken(primes.size(), 0);
        for (int i = 0; i < n; i++) {
            int ele = nums[i];
            for (int j = 0; j < primes.size(); j++) {
                if (primes[j] > ele) break;
                if (ele % primes[j] == 0) {
                    taken[j] = true;
                    // Divide ele by primes[j] to handle multiple factors of the same prime
                    while (ele % primes[j] == 0) {
                        ele /= primes[j];
                    }
                }
            }
        }

        // Count distinct primes that are factors of any number in nums
        int count = 0;
        for (int i = 0; i < primes.size(); i++) {
            if (taken[i]) count++;
        }

        return count;
    }
};
